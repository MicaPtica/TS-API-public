---
title: 'Elbow FES'
---

![Teslasuit v.](https://img.shields.io/badge/Teslasuit_v.-4.7, 4.8-red)
![Teslasuit SDK](https://img.shields.io/badge/Teslasuit_SDK-2.5.1+-blue)
![Python](https://img.shields.io/badge/Python-3.8+-green)

## Quick access
- [Project Github](https://github.com/teslasuit/FES-Elbow-flexion-control)
- [API Subsystems Reference](../API%20Reference/subsystems/)
- [Main Concepts](../Main%20concepts/index.qmd)

## What is Elbow FES?

**Elbow FES** (Functional Electrical Stimulation) is a use case demonstrating the application of the Teslasuit for controlling elbow flexion using electrical stimulation. The project integrates Teslasuit’s haptic and motion capture systems to deliver targeted muscle stimulation and monitor joint movement, enabling research and development in rehabilitation, assistive technology, and biomechanics.

This use case showcases how the Teslasuit can be used to both sense and actuate the human body in a closed-loop manner. By leveraging the suit’s motion capture (mocap) sensors, the system can continuously monitor the biomechanical angle of the elbow joint in real time. At the same time, the haptic subsystem is used to deliver functional electrical stimulation (FES) to specific muscle groups, such as the biceps, to induce or assist elbow flexion.

The project demonstrates a closed-loop control approach, where the measured joint angle is compared to a desired target angle, and the stimulation parameters are automatically adjusted to achieve and maintain the desired movement. This enables applications in rehabilitation, assistive robotics where precise and adaptive muscle activation is required.

## Project Overview

The [FES for Elbow flexion control](https://github.com/teslasuit/FES-Elbow-flexion-control) project provides a Python-based implementation for controlling elbow flexion via the Teslasuit. It leverages the suit’s APIs for:

- **Motion Capture:** Tracking elbow joint angles in real time using the suit’s mocap sensors.
- **Haptic Feedback / FES:** Delivering electrical stimulation to the relevant muscle groups to induce or assist elbow flexion.
- **Closed-loop Control:** Implementing feedback mechanisms to adjust stimulation parameters based on sensor data.

### Motion Capture Example

```python
from teslasuit_sdk import ts_api

class Teslasuit():
    def __init__(self):
        self.api = ts_api.TsApi()

    def connect_suit(self):
        device_manager = self.api.get_device_manager()
        suit = device_manager.get_or_wait_last_device_attached()
        self.streamer = suit.mocap
        # ...other initialization...

    def start_mocap_streaming(self):
        self.streamer.start_streaming()

    def get_q6(self, index):
        last_imu_data = self.streamer.get_raw_data_on_ready()
        q6_data = [
            last_imu_data[index].q6.x,
            last_imu_data[index].q6.y,
            last_imu_data[index].q6.z,
            last_imu_data[index].q6.w]
        return q6_data

# Example of calculating elbow angle using SkeletalModelUpdater
from scipy.spatial.transform import Rotation as R
import numpy as np

# Assume suit and model are already initialized and calibrated
q_proximal = suit.get_q6(joint.proximal_bone)  # e.g., upper arm
q_distal = suit.get_q6(joint.distal_bone)      # e.g., lower arm

# Initial heading rotation from calibration
initial_heading_rot = R.from_quat(joint.initial_proximal_bone_quat) * R.from_quat(joint.initial_distal_bone_quat).inv()
ini_saggital_vec = np.array([0, 1, 0])

vec1 = R.from_quat(q_proximal).apply(ini_saggital_vec)
vec2 = (initial_heading_rot * R.from_quat(q_distal)).apply(ini_saggital_vec)
elbow_angle = np.arccos(vec1.dot(vec2)) * 180 / np.pi
print("Elbow flexion angle:", elbow_angle)
```

**Explanation:**  
This code defines a `Teslasuit` class that wraps the Teslasuit API for easier use. The `connect_suit` method connects to the suit and initializes the motion capture (mocap) subsystem. The `start_mocap_streaming` method begins streaming mocap data, and `get_q6` retrieves the quaternion data from a specific IMU sensor.

To calculate the elbow angle, the code uses the `SkeletalModelUpdater` approach:  
- It retrieves the calibrated (initial) and current quaternions for the upper and lower arm.
- It computes the relative rotation and applies it to a reference vector (e.g., the saggital plane).
- The angle between the vectors gives the current elbow flexion angle in degrees.

This approach allows for accurate and real-time calculation of the elbow angle, which is crucial for closed-loop control in the Elbow FES project.

### Haptic Feedback / FES Example

```python
    def haptic_play_touch(
            self,
            channel_id,
            ampl=100,
            period=20000,
            pw=100,
            duration=100):
        params = self.haptic.create_touch_parameters(period, ampl, pw)
        playable_id = self.haptic.create_touch(params, channel_id, duration)
        self.haptic.play_playable(playable_id)
```
**Explanation:**  
This method sends an electrical stimulation (FES) command to a specific haptic channel on the Teslasuit. The parameters control the stimulation waveform:  
- `channel_id`: which electrode channel to activate  
- `ampl`: amplitude of the stimulation  
- `period`: period of the waveform  
- `pw`: pulse width  
- `duration`: how long the stimulation lasts (ms)  
This function is used to trigger muscle contractions for elbow flexion.

### Closed-loop Control Example

```python
class App(PIDMainWindow):
    def __init__(self, parent=None):
        super(App, self).__init__(parent)
        self.suit = Teslasuit()
        self.suit.connect_suit()
        self.model = SkeletalModel()
        self.model_updater = SkeletalModelUpdater(self.suit, self.model)
        self.model_updater.calibrate()
        self.controller = PIDSkeletalModelController(self.suit, self.model)
        # ...timers and UI setup...

    def update_pid(self):
        # Called periodically by timer
        self.controlled_joint.controller.saggital_plane_controller.agonist_controller.parameters_list = self.pid_parameters_list
        self.controlled_joint.controller.saggital_plane_controller.agonist_controller.change_parameters()
        self.controlled_joint.controller.update_haptic_output()
```
**Explanation:**  
This code shows how the application integrates a PID (Proportional-Integral-Derivative) control loop for closed-loop FES. The `App` class initializes the Teslasuit, sets up the skeletal model, and calibrates the system. The `update_pid` method is called periodically (e.g., by a timer) to update the PID controller parameters and send new stimulation commands based on the current joint angle error. This enables adaptive and precise control of elbow flexion.

## Key Components

- **Motion Capture Sensors:**  
  Used to measure the biomechanical angle of the elbow joint, providing feedback for control algorithms.

- **Haptic Channels:**  
  Specific electrode channels are activated to stimulate the muscles responsible for elbow flexion.

- **Control System:**  
  The project includes a control system that processes mocap data and adjusts stimulation in real time.

- **User Interface:**  
  The application provides a user interface for configuring stimulation parameters and monitoring joint movement.

## How the Key Components Work Together

The Elbow FES project demonstrates a closed-loop system where **motion capture**, **haptic feedback (FES)**, and the **control system** are tightly integrated to achieve precise, adaptive muscle stimulation for elbow flexion. Here’s how these components interact:

### 1. Motion Capture Sensors

The Teslasuit’s mocap subsystem streams real-time data from IMUs (inertial measurement units) embedded in the suit. This data is processed to extract biomechanical joint angles, such as the elbow flexion angle. The `SkeletalModelUpdater` class (see `control_system.py`) uses quaternion data from the suit (via `suit_handler.py`) to compute the current angle of the elbow joint.

- **Role:** Provides accurate, real-time feedback on the user’s joint position, which is essential for closed-loop control.

### 2. Haptic feedback (FES Output)

The haptic subsystem of the Teslasuit delivers electrical stimulation to specific muscle groups through mapped electrode channels. The `Teslasuit` class (in `suit_handler.py`) exposes methods to trigger stimulation on selected channels, such as the biceps or triceps, with configurable parameters (amplitude, pulse width, duration).

- **Role:** Acts as the actuator, generating muscle contractions to move the elbow joint toward the desired angle.

### 3. Control System

The control system, implemented in `control_system.py` and orchestrated by the main application (`app.py`), uses a PID (Proportional-Integral-Derivative) controller to compare the current elbow angle (from mocap) with the target angle (set by the user or another limb). The PID controller calculates the error and dynamically adjusts the stimulation parameters sent to the haptic subsystem.

- **Role:** Closes the feedback loop by continuously adjusting stimulation based on real-time joint angle feedback, ensuring smooth and accurate movement.

### How They Interact

1. **Initialization:**  
   The user connects the Teslasuit, calibrates the mocap system, and sets a desired elbow angle via the GUI.

2. **Sensing:**  
   The mocap subsystem streams joint angles to the control system.

3. **Control:**  
   The PID controller computes the difference between the current and desired angles and determines the optimal stimulation parameters.

4. **Actuation:**  
   The haptic subsystem delivers FES to the appropriate muscle group, causing the elbow to flex or extend.

5. **Feedback:**  
   The new joint angle is sensed by the mocap system, and the loop repeats, allowing for real-time, adaptive control.

This integration enables the Teslasuit to both sense and actuate the human body in a coordinated, automated fashion, making it a powerful platform for rehabilitation, assistive technology, and biomechanics research.


## Example Workflow

1. **Setup:**  
   Connect the Teslasuit and ensure all sensors and electrodes are properly positioned.
2. **Calibration:**  
   Calibrate the mocap sensors for accurate joint angle measurement.
3. **Stimulation:**  
   Use the application to deliver FES to the elbow flexor muscles, adjusting parameters as needed.
4. **Monitoring:**  
   Observe real-time feedback on joint angle and muscle stimulation, making adjustments to optimize performance.
5. **Data Collection:**  
   Collect data on joint angles, stimulation parameters, and muscle responses for analysis.
6. **Analysis and Iteration:**  
   Analyze the collected data to refine control algorithms and improve stimulation strategies. Iterate on the design and implementation based on experimental findings.


---

**Note:** This use case demonstrates how Teslasuit’s integrated systems can be used for advanced rehabilitation and research scenarios, combining precise motion tracking with programmable electrical stimulation for enhanced therapeutic outcomes.