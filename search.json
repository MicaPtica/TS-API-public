[
  {
    "objectID": "Main concepts/ppg_concept.html#quick-access",
    "href": "Main concepts/ppg_concept.html#quick-access",
    "title": "PPG",
    "section": "Quick access",
    "text": "Quick access\n\nPPG Subsystem\nExamples\nUsecase\nPPG Data structures",
    "crumbs": [
      "Main concepts",
      "PPG"
    ]
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Overview",
    "section": "",
    "text": "On this page you can find some examples of API usage",
    "crumbs": [
      "Examples",
      "Overview"
    ]
  },
  {
    "objectID": "examples/index.html#intro",
    "href": "examples/index.html#intro",
    "title": "Overview",
    "section": "",
    "text": "On this page you can find some examples of API usage",
    "crumbs": [
      "Examples",
      "Overview"
    ]
  },
  {
    "objectID": "examples/index.html#examples",
    "href": "examples/index.html#examples",
    "title": "Overview",
    "section": "Examples",
    "text": "Examples\n\nPPG\nEMG\nMocap\nForce Feedback\nHaptic",
    "crumbs": [
      "Examples",
      "Overview"
    ]
  },
  {
    "objectID": "api_docs.html",
    "href": "api_docs.html",
    "title": "api_docs",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "api_docs.html#quarto",
    "href": "api_docs.html#quarto",
    "title": "api_docs",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Getting_started.html",
    "href": "Getting_started.html",
    "title": "Getting started",
    "section": "",
    "text": "Welcome to the Teslasuit SDK! This guide will help you take your first steps with the Teslasuit API — from setting up your environment to running your first haptic interaction.\nMake sure your Teslasuit is connected to your PC or laptop before continuing.",
    "crumbs": [
      "Home",
      "Getting started"
    ]
  },
  {
    "objectID": "Getting_started.html#welcome",
    "href": "Getting_started.html#welcome",
    "title": "Getting started",
    "section": "",
    "text": "Welcome to the Teslasuit SDK! This guide will help you take your first steps with the Teslasuit API — from setting up your environment to running your first haptic interaction.\nMake sure your Teslasuit is connected to your PC or laptop before continuing.",
    "crumbs": [
      "Home",
      "Getting started"
    ]
  },
  {
    "objectID": "Getting_started.html#requirements",
    "href": "Getting_started.html#requirements",
    "title": "Getting started",
    "section": "Requirements",
    "text": "Requirements\nTo get started, make sure the following requirements are met:\n\nTeslasuit device connected and recognized by the system\nTeslasuit Control Center installed (for suit calibration)\nTeslasuit SDK added to your PATH",
    "crumbs": [
      "Home",
      "Getting started"
    ]
  },
  {
    "objectID": "Getting_started.html#environment-setup",
    "href": "Getting_started.html#environment-setup",
    "title": "Getting started",
    "section": "Environment Setup",
    "text": "Environment Setup\nBefore writing any code, make sure the Teslasuit SDK is available in your Python environment.\nIf you’re developing locally and the SDK is not in your PATH, you can use the following snippet to add it dynamically:\ntry:\n    import teslasuit_sdk\nexcept ImportError:\n    import os\n    import sys\n    sdk_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n    sys.path.insert(0, sdk_path)\n    import teslasuit_sdk\n    print(f'Successfully added \\'{sdk_path}\\' into sys.path')",
    "crumbs": [
      "Home",
      "Getting started"
    ]
  },
  {
    "objectID": "Getting_started.html#first-steps",
    "href": "Getting_started.html#first-steps",
    "title": "Getting started",
    "section": "First steps",
    "text": "First steps\n\nConnect the Suit\nAfter connecting your Teslasuit to your PC or laptop, you’re ready to explore its capabilities using Python.\nTo begin, you need to:\n\nAttach the device\nInitialize the API and Device\nCreate a haptic playable\n\n⚠️ Safety First!\nPlease calibrate your suit in Control Center in order to avoid unpleasant or painful experience\n\n\nRun Your First Touch\nBelow is a complete example that demonstrates how to send a basic haptic touch to the right upper arm of the suit:\nimport time\nfrom teslasuit_sdk import ts_api\nimport teslasuit_sdk.subsystems.ts_haptic\nfrom teslasuit_sdk.ts_mapper import TsBone2dIndex\n\nTOUCH_DURATION_MS = 1000\n\ndef main():\n    print(\"Initialize API\")\n    api = ts_api.TsApi()\n    device = api.get_device_manager().get_or_wait_last_device_attached()\n    player = device.haptic\n    mapper = api.mapper\n\n    print(\"Setup channels to play and touch parameters\")\n    layout = mapper.get_haptic_electric_channel_layout(device.get_mapping())\n    bones = mapper.get_layout_bones(layout)\n    channels = mapper.get_bone_contents(bones[TsBone2dIndex.RightUpperArm.value])\n    params = player.create_touch_parameters(100, 40, 150)\n\n    print(\"Create touch and play\")\n    playable_id = player.create_touch(params, channels, TOUCH_DURATION_MS)\n    player.play_playable(playable_id)\n\n    print(\"Wait until playback finished...\")\n    time.sleep(TOUCH_DURATION_MS / 1000)\n    print(\"Finished\")\n\n\nif __name__ == '__main__':\n    main()",
    "crumbs": [
      "Home",
      "Getting started"
    ]
  },
  {
    "objectID": "Getting_started.html#test-your-setup",
    "href": "Getting_started.html#test-your-setup",
    "title": "Getting started",
    "section": "Test Your Setup",
    "text": "Test Your Setup\nIf the suit is connected and the SDK is installed correctly, running the script above should produce a short haptic effect on the right upper arm of the suit.\nIf nothing happens:\nEnsure the device is calibrated in the Control Center Check the connection Confirm that Python can import the teslasuit_sdk module",
    "crumbs": [
      "Home",
      "Getting started"
    ]
  },
  {
    "objectID": "Getting_started.html#explore-more",
    "href": "Getting_started.html#explore-more",
    "title": "Getting started",
    "section": "Explore more",
    "text": "Explore more\nReady to dive deeper?\n\nLearn about Teslasuit systems in the Main concepts section.\nExplore the Core and Subsystems API in the API Reference.\nWalk through various Examples to get started with specific suit features.\nGet inspired by real-world applications in the Usecases section",
    "crumbs": [
      "Home",
      "Getting started"
    ]
  },
  {
    "objectID": "API Reference/subsystems/emg.html",
    "href": "API Reference/subsystems/emg.html",
    "title": "EMG",
    "section": "",
    "text": "EMPTY PAGE",
    "crumbs": [
      "API Reference",
      "Subsystems",
      "EMG"
    ]
  },
  {
    "objectID": "API Reference/subsystems/index.html",
    "href": "API Reference/subsystems/index.html",
    "title": "Overview",
    "section": "",
    "text": "In this section you can find a documentation for parts of API responsible for communication with different TESLASUIT and TESLAGLOVE subsystems.",
    "crumbs": [
      "API Reference",
      "Subsystems",
      "Overview"
    ]
  },
  {
    "objectID": "API Reference/subsystems/index.html#intro",
    "href": "API Reference/subsystems/index.html#intro",
    "title": "Overview",
    "section": "",
    "text": "In this section you can find a documentation for parts of API responsible for communication with different TESLASUIT and TESLAGLOVE subsystems.",
    "crumbs": [
      "API Reference",
      "Subsystems",
      "Overview"
    ]
  },
  {
    "objectID": "API Reference/subsystems/index.html#subsystems",
    "href": "API Reference/subsystems/index.html#subsystems",
    "title": "Overview",
    "section": "Subsystems",
    "text": "Subsystems\n\nEMG\nHAPTIC\nMOCAP\nPPG\nFORCE FEEDBACK",
    "crumbs": [
      "API Reference",
      "Subsystems",
      "Overview"
    ]
  },
  {
    "objectID": "API Reference/core/data_structures.html",
    "href": "API Reference/core/data_structures.html",
    "title": "Data structures",
    "section": "",
    "text": "This is the page where you can find explanation of data structures used in TESLASUIT SDK",
    "crumbs": [
      "API Reference",
      "Core",
      "Data structures"
    ]
  },
  {
    "objectID": "API Reference/core/data_structures.html#intro",
    "href": "API Reference/core/data_structures.html#intro",
    "title": "Data structures",
    "section": "",
    "text": "This is the page where you can find explanation of data structures used in TESLASUIT SDK",
    "crumbs": [
      "API Reference",
      "Core",
      "Data structures"
    ]
  },
  {
    "objectID": "API Reference/core/data_structures.html#ppg",
    "href": "API Reference/core/data_structures.html#ppg",
    "title": "Data structures",
    "section": "PPG",
    "text": "PPG\n\nTsHrv(Structure):\nRepresents Heart Rate Variability (HRV) metrics.\nThis structure stores various HRV parameters, which are used to analyze fluctuations in heart rate over time. These metrics help assess autonomic nervous system activity and overall heart health.\nAttributes:\nmean_rr (float): Mean RR interval (time between successive heartbeats) in milliseconds.\n\nsdnn (float): Standard deviation of NN (normal-to-normal) intervals, indicating overall HRV.\n\nsdsd (float): Standard deviation of successive RR interval differences.\n\nrmssd (float): Root Mean Square of Successive Differences between RR intervals, \n                reflecting short-term HRV.\n\nsd1 (float): Poincaré plot standard deviation perpendicular to the line of identity \n                (short-term HRV component).\n\nsd2 (float): Poincaré plot standard deviation along the line of identity \n                (long-term HRV component).\n\nhlf (float): High-frequency component of HRV, associated with parasympathetic nervous activity.\n\n\nTsPpgRawData(Structure):\nRepresents raw PPG (Photoplethysmography) data from multiple sensor nodes.\nThis structure holds raw PPG data collected from multiple sensor nodes, each of which contains infrared, red, blue, and green sensor values, along with timestamps.\nAttributes: number_of_nodes (int): The number of sensor nodes providing PPG data. nodes (POINTER(TsPpgRawNodeData)): Pointer to an array of node data structures.\n\n\nTsPpgData(Structure):\nRepresents processed PPG (Photoplethysmography) data from multiple sensor nodes.\nThis structure stores processed PPG data collected from multiple sensor nodes. Each node contains PPG-related metrics, including heart rate validation.\nAttributes: number_of_nodes (int): The number of sensor nodes providing PPG data. nodes (POINTER(TsPpgNodeData)): Pointer to an array of processed node data structures.\n\n\nTsPpgNodeData(Structure):\nRepresents processed PPG (Photoplethysmography) data for a single sensor node. This structure stores heart rate, blood oxygen level, and validity flags for a specific PPG sensor node, along with a timestamp indicating when the data was recorded. Attributes: heart_rate (int): Heart rate calculated in BPM. oxygen_percent (int): The measured blood oxygen saturation (SpO2) percentage. is_heart_rate_valid (bool): Is calculated heart rate valid. is_oxygen_percent_valid (bool): Is blood oxygen value valid. timestamp (int): Time point that set when the last raw PPG data sample was processed.",
    "crumbs": [
      "API Reference",
      "Core",
      "Data structures"
    ]
  },
  {
    "objectID": "API Reference/subsystems/ppg.html#quick-access",
    "href": "API Reference/subsystems/ppg.html#quick-access",
    "title": "PPG",
    "section": "Quick access",
    "text": "Quick access\n\nMain concept\nExamples\nUsecase\nPPG Data structures",
    "crumbs": [
      "API Reference",
      "Subsystems",
      "PPG"
    ]
  },
  {
    "objectID": "API Reference/subsystems/ppg.html#intro",
    "href": "API Reference/subsystems/ppg.html#intro",
    "title": "PPG",
    "section": "Intro",
    "text": "Intro\nBiometry subsystem provides functions to access PPG functionality.",
    "crumbs": [
      "API Reference",
      "Subsystems",
      "PPG"
    ]
  },
  {
    "objectID": "API Reference/subsystems/ppg.html#prerequisites",
    "href": "API Reference/subsystems/ppg.html#prerequisites",
    "title": "PPG",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nTeslasuit API Initialization The Teslasuit API must be initialized before accessing any of its features.\nConnected Teslasuit Device A Teslasuit device must be connected. If no device is available, the system will wait until one is attached.\nAccess to the PPG Subsystem The TsPPG class is part of the device’s functionality and can only be used after obtaining access to a connected Teslasuit device.\n\n\nNote:\nSince TsPPG is a member of the device class, it cannot be used independently without an active Teslasuit device.",
    "crumbs": [
      "API Reference",
      "Subsystems",
      "PPG"
    ]
  },
  {
    "objectID": "API Reference/subsystems/ppg.html#class-tsppg",
    "href": "API Reference/subsystems/ppg.html#class-tsppg",
    "title": "PPG",
    "section": "Class TsPpg",
    "text": "Class TsPpg\nHandles PPG (Photoplethysmography) sensor data processing and streaming. This class manages the interaction with a PPG sensor, including raw and processed data streaming, calibration, and retrieving heart rate variability (HRV) and raw PPG data.\n\nClass methods:\n\nstart_raw_streaming(self)\nStart the streaming of a PPG raw data\n\nstop_raw_streaming(self)\nStop the streaming of a PPG raw data\n\nget_hrv_data_on_ready(self)\nBlocks execution until HRV data is ready and returns the latest HRV data.\nReturns TsHrv (struct): The latest HRV data.\n\nget_raw_data_on_ready(self)\nBlocks execution until raw PPG data is ready and returns the latest raw data. Returns TsPpgRawData (struct): The latest raw PPG data.\n\nget_hrv(self)\nRetrieves the latest HRV data. Returns TsHrv (struct): The latest HRV data.\n\nget_data_raw(self)\nRetrieves the latest raw PPG data. Returns TsPpgRawData (struct): The latest raw PPG data.\n\nget_data(self)\nRetrieves the latest processed PPG data. Returns TsPpgData: The latest processed PPG data.\nNB! TsPpgData struct doesn’t provide any parameters such as “heart_rate” or “oxygen_percent”. The access is given through the TsPpgNodeData struct. Please see the example.\n\ncalibrate(self)\nCalibrates PPG processor. The calibration procedure is capturing interval of the raw data during 3 seconds. The captured interval will be used in calculation of all ppg parameters. By default, calibration procedure starts on starting PPG processor. In case on bad start, the calibration procedure might be restarted using this function.",
    "crumbs": [
      "API Reference",
      "Subsystems",
      "PPG"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "The Teslasuit SDK is a developer toolkit for integrating the Teslasuit — a full-body haptic suit with motion capture and biometric sensors — into immersive applications. With this SDK, developers can control the suit’s haptic feedback system, stream and record motion data, and monitor biometric signals in real time.\nThe Teslasuit SDK Python API provides a high-level interface for integrating Teslasuit systems into Python-based applications. It enables developers, researchers, and engineers to access the full range of Teslasuit’s haptic, motion capture, and biometric capabilities through an efficient and extensible API.\n\n\n\n\n\nThe Haptics module allows you to control the suit’s network of electrical stimulators to create realistic tactile feedback or stimulate major muscle groups to elicit contractions. Developers can configure custom stimulation patterns, adjust intensity levels, and trigger feedback events in sync with application logic.\nFor example, you might simulate the feeling of impact or rainfall on the user’s body, or provide a complex stimulation pattern across multiple muscle groups in the lower extremities, synchronized with the gait cycle.\n➡️ Create your first haptic touch.\n🔍 Learn more about the suit’s EMS system and best practices for designing haptic feedback here.\n\n\n\n\nThe Motion Capture module provides access to the suit’s built-in IMU-based inertial tracking system. The SDK streams detailed motion and biomechanical data in real time, using a skeletal model to deliver full-body pose tracking.\nFor example, you can animate a game character using real-time body motion, record physical activity for replay or analysis, or dynamically adjust stimulation based on biomechanical feedback.\n➡️ Start your first motion capture stream.\n🔍 Learn more about Teslasuit’s MoCap system, coordinate systems, and best practices here.\n\n\n\n\nThe Biometry module provides real-time biometric readings from the suit’s sensors to monitor the user’s physical state. With the Python API, developers can access data such as heart rate and heart rate variability (HRV), offering insights into stress, fatigue, or exertion levels.\nFor instance, an adaptive training application can adjust difficulty or feedback based on a user’s physiological response.\n➡️ Measure your heart rate now.\n🔍 Learn more about Teslasuit’s biometric system and HRV metrics here.\n\n\n\n\n\nThe API documentation is organized into the following sections:\n\nGetting Started – Fast setup for quick firs steps\nMain Concepts – Theory and architecture of Teslasuit systems\n\nAPI Reference\n\nCore – Initialization, connection, session control\n\nSubsystems – Haptics, Mocap, Biometry, Mapping, etc.\n\n\nExamples – Step-by-step usage scripts\n\nUse Cases – Practical applications and integration flows\n\n\n\n\n\nTo use the Teslasuit SDK Python API, ensure you have:\n\nWindows 10 or later\n\nInstalled Teslasuit Control Center\nPython 3.8 or higher\n\nA connected Teslasuit device\n\n\n\n\n\nFor technical inquiries, feature requests, or troubleshooting assistance, please contact:\n\nHelp Desk\n\nFAQ\n\nDeveloper Forum\n\nEmail support: support@teslasuit.io",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#core-capabilities",
    "href": "index.html#core-capabilities",
    "title": "Introduction",
    "section": "",
    "text": "The Haptics module allows you to control the suit’s network of electrical stimulators to create realistic tactile feedback or stimulate major muscle groups to elicit contractions. Developers can configure custom stimulation patterns, adjust intensity levels, and trigger feedback events in sync with application logic.\nFor example, you might simulate the feeling of impact or rainfall on the user’s body, or provide a complex stimulation pattern across multiple muscle groups in the lower extremities, synchronized with the gait cycle.\n➡️ Create your first haptic touch.\n🔍 Learn more about the suit’s EMS system and best practices for designing haptic feedback here.\n\n\n\n\nThe Motion Capture module provides access to the suit’s built-in IMU-based inertial tracking system. The SDK streams detailed motion and biomechanical data in real time, using a skeletal model to deliver full-body pose tracking.\nFor example, you can animate a game character using real-time body motion, record physical activity for replay or analysis, or dynamically adjust stimulation based on biomechanical feedback.\n➡️ Start your first motion capture stream.\n🔍 Learn more about Teslasuit’s MoCap system, coordinate systems, and best practices here.\n\n\n\n\nThe Biometry module provides real-time biometric readings from the suit’s sensors to monitor the user’s physical state. With the Python API, developers can access data such as heart rate and heart rate variability (HRV), offering insights into stress, fatigue, or exertion levels.\nFor instance, an adaptive training application can adjust difficulty or feedback based on a user’s physiological response.\n➡️ Measure your heart rate now.\n🔍 Learn more about Teslasuit’s biometric system and HRV metrics here.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#documentation-structure",
    "href": "index.html#documentation-structure",
    "title": "Introduction",
    "section": "",
    "text": "The API documentation is organized into the following sections:\n\nGetting Started – Fast setup for quick firs steps\nMain Concepts – Theory and architecture of Teslasuit systems\n\nAPI Reference\n\nCore – Initialization, connection, session control\n\nSubsystems – Haptics, Mocap, Biometry, Mapping, etc.\n\n\nExamples – Step-by-step usage scripts\n\nUse Cases – Practical applications and integration flows",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Introduction",
    "section": "",
    "text": "To use the Teslasuit SDK Python API, ensure you have:\n\nWindows 10 or later\n\nInstalled Teslasuit Control Center\nPython 3.8 or higher\n\nA connected Teslasuit device",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#support-and-contact",
    "href": "index.html#support-and-contact",
    "title": "Introduction",
    "section": "",
    "text": "For technical inquiries, feature requests, or troubleshooting assistance, please contact:\n\nHelp Desk\n\nFAQ\n\nDeveloper Forum\n\nEmail support: support@teslasuit.io",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "examples/ppg_example.html#quick-access",
    "href": "examples/ppg_example.html#quick-access",
    "title": "PPG example",
    "section": "Quick access",
    "text": "Quick access\n\nMain concept\nPPG Subsystem\nUsecase\nPPG Data structures",
    "crumbs": [
      "Examples",
      "PPG example"
    ]
  },
  {
    "objectID": "examples/ppg_example.html#intro",
    "href": "examples/ppg_example.html#intro",
    "title": "PPG example",
    "section": "Intro",
    "text": "Intro\nThis web page provides a comprehensive guide on how to retrieve data from the PPG (Photoplethysmography) sensor of a Teslasuit device. The page is structured to help developers understand the process of initializing the Teslasuit API, connecting to a device, accessing the PPG subsystem, and streaming data such as heart rate and HRV (Heart Rate Variability).",
    "crumbs": [
      "Examples",
      "PPG example"
    ]
  },
  {
    "objectID": "examples/ppg_example.html#code-for-hrv-data",
    "href": "examples/ppg_example.html#code-for-hrv-data",
    "title": "PPG example",
    "section": "Code for HRV data",
    "text": "Code for HRV data\n\n1from teslasuit_sdk import ts_api\n2import teslasuit_sdk.subsystems.ts_ppg\n\ndef main():\n3    print(\"Initializing Teslasuit API...\")\n    api = ts_api.TsApi()\n\n4    print(\"Waiting for a Teslasuit device to connect...\")\n    device = api.get_device_manager().get_or_wait_last_device_attached()\n\n5    print(\"Accessing the PPG subsystem...\")\n    ppg = device.ppg\n\n6    print(\"Starting raw PPG data streaming...\")\n    ppg.start_raw_streaming()\n\n    print(\"Waiting for HRV data (Mean R-R)...\")\n    while True:\n7        hrv_data = ppg.get_hrv_data_on_ready()\n8        print(\"Mean R-R Interval:\", hrv_data.mean_rr)\n\n# Entry point for the script\nif __name__ == \"__main__\":\n9    main()\n\n1\n\nImport the main Teslasuit API module.\n\n2\n\nImport the PPG subsystem from the SDK.\n\n3\n\nCreate an instance of the Teslasuit API.\n\n4\n\nWait for a Teslasuit device to be connected and get it.\n\n5\n\nAccess the PPG subsystem from the device.\n\n6\n\nStart streaming raw PPG data from the suit.\n\n7\n\nWait for HRV data to become available.\n\n8\n\nPrint the mean R-R interval from HRV data.\n\n9\n\nStart the program using the main function.",
    "crumbs": [
      "Examples",
      "PPG example"
    ]
  },
  {
    "objectID": "examples/ppg_example.html#expected-output",
    "href": "examples/ppg_example.html#expected-output",
    "title": "PPG example",
    "section": "Expected output",
    "text": "Expected output\n\n1Initializing Teslasuit API...\n2Waiting for a Teslasuit device to connect...\n3Accessing the PPG subsystem...\n4Starting raw PPG data streaming...\n5Waiting for HRV data (Mean R-R)...\n6Mean R-R Interval: 750\n\n1\n\nApi is initialized via api = ts_api.TsApi()\n\n2\n\nThe program waits for a Teslasuit device to connect using api.get_device_manager().get_or_wait_last_device_attached().\n\n3\n\nThe PPG subsystem of the connected device is accessed via device.ppg.\n\n4\n\nRaw PPG data streaming is initiated with ppg.start_raw_streaming().\n\n5\n\nThe program enters a loop to wait for HRV data, specifically the Mean R-R interval, using ppg.get_hrv_data_on_ready().\n\n6\n\nThe Mean R-R interval is printed to the console as it becomes available.\n\n\n⚠️ In order to get valid HRV data, you have to wait for at least 30 seconds before getting actual data.",
    "crumbs": [
      "Examples",
      "PPG example"
    ]
  },
  {
    "objectID": "examples/ppg_example.html#code-for-heart-rate-data",
    "href": "examples/ppg_example.html#code-for-heart-rate-data",
    "title": "PPG example",
    "section": "Code for Heart rate data",
    "text": "Code for Heart rate data\n\n1from teslasuit_sdk import ts_api\n2import teslasuit_sdk.subsystems.ts_ppg\n\ndef main():\n3    print(\"Initializing Teslasuit API...\")\n    api = ts_api.TsApi()\n\n4    print(\"Waiting for a Teslasuit device to connect...\")\n    device = api.get_device_manager().get_or_wait_last_device_attached()\n\n5    print(\"Accessing the PPG subsystem...\")\n    ppg = device.ppg\n\n6    print(\"Starting raw PPG data streaming...\")\n    ppg.start_raw_streaming()\n\n    # Wait for and print Heart Rate data from the PPG node\n    print(\"Waiting for Heart Rate data...\")\n    while True:\n7        node_data = ppg.get_data()\n8        print(\"Heart Rate:\", node_data.nodes[0].heart_rate)\n\n# Entry point for the script\nif __name__ == \"__main__\":\n9    main()\n\n1\n\nImport the main Teslasuit API module.\n\n2\n\nImport the PPG subsystem from the SDK.\n\n3\n\nCreate an instance of the Teslasuit API.\n\n4\n\nWait for a Teslasuit device to be connected and get it.\n\n5\n\nAccess the PPG subsystem from the device.\n\n6\n\nStart streaming raw PPG data from the suit.\n\n7\n\nGet PPG data from the node.\n\n8\n\nPrint the current heart rate from the first node.\n\n9\n\nStart the program using the main function.",
    "crumbs": [
      "Examples",
      "PPG example"
    ]
  },
  {
    "objectID": "examples/ppg_example.html#expected-output-1",
    "href": "examples/ppg_example.html#expected-output-1",
    "title": "PPG example",
    "section": "Expected output",
    "text": "Expected output\n\n1Initializing Teslasuit API...\n2Waiting for a Teslasuit device to connect...\n3Accessing the PPG subsystem...\n4Starting raw PPG data streaming...\n5Waiting for Heart Rate data...\n6Heart Rate: 72\n\n1\n\nApi is initialized via api = ts_api.TsApi()\n\n2\n\nThe program waits for a Teslasuit device to connect using api.get_device_manager().get_or_wait_last_device_attached().\n\n3\n\nThe PPG subsystem of the connected device is accessed via device.ppg.\n\n4\n\nRaw PPG data streaming is initiated with ppg.start_raw_streaming().\n\n5\n\nThe program enters another loop to wait for heart rate data from the first PPG node using ppg.get_data().\n\n6\n\nThe heart rate value is printed to the console as it becomes available using node_data.nodes[0].heart_rate()",
    "crumbs": [
      "Examples",
      "PPG example"
    ]
  },
  {
    "objectID": "usecases/ppg_visualiser.html#quick-access",
    "href": "usecases/ppg_visualiser.html#quick-access",
    "title": "Real-time Heart rate visualiser",
    "section": "Quick access",
    "text": "Quick access\n\nMain concept\nExamples\nPPG Subsystem\nPPG Data structures\n\n\n\n\n\n\n\nTo start we need\n\n\n\n\n\nTo start working with the Teslasuit PPG sensor, you need to ensure the following prerequisites are met:\n\nTeslasuit Device\n\nEnsure you have access to a Teslasuit device with of version 4.7 or higher.\n\nTeslasuit SDK\n\nInstall the Teslasuit SDK.\n\nFollow the installation guide to set up the SDK on your system.\n\nPython Environment\n\nInstall Python 3.8 or higher.\nEnsure that Python SDK is added to your . If it’s not run script from this section\n\nConnection Setup\n\nEnsure the Teslasuit device is powered on and connected to your computer via WiFi.\nVerify the connection using the Teslasuit Control Center application.\n\nDevelopment Environment\n\nUse an IDE or text editor that supports Python development, such as VS Code or PyCharm.\n\nPermissions\n\nEnsure you have the necessary permissions to access the Teslasuit device and its subsystems.\n\nOn some systems, you may need to run the script with elevated privileges.\n\n\nOnce these prerequisites are met, you can proceed to initialize the Teslasuit API and start working with the PPG subsystem as demonstrated in the code section below.",
    "crumbs": [
      "Usecases",
      "Real-time Heart rate visualiser"
    ]
  },
  {
    "objectID": "usecases/ppg_visualiser.html#visualising-heart-rate-data",
    "href": "usecases/ppg_visualiser.html#visualising-heart-rate-data",
    "title": "Real-time Heart rate visualiser",
    "section": "Visualising Heart Rate data",
    "text": "Visualising Heart Rate data\nimport matplotlib.pyplot as plt\n1from teslasuit_sdk import ts_api\n2import teslasuit_sdk.subsystems.ts_ppg\n\n\ndef main():\n3    print(\"Initializing Teslasuit API...\")\n    api = ts_api.TsApi()\n\n4    print(\"Waiting for a Teslasuit device to connect...\")\n    device = api.get_device_manager().get_or_wait_last_device_attached()\n\n5    print(\"Accessing the PPG subsystem...\")\n    ppg = device.ppg\n\n6    print(\"Starting raw PPG data streaming...\")\n    ppg.start_raw_streaming()\n\n    # Initialize plot\n7    plt.ion()\n    fig, ax = plt.subplots()\n    x_data, y_data = [], []\n    line, = ax.plot(x_data, y_data, label=\"Heart Rate (bpm)\")\n    ax.set_xlabel(\"Timestamp (s)\")\n    ax.set_ylabel(\"Heart Rate (bpm)\")\n    ax.set_title(\"Real-Time Heart Rate Data\")\n    ax.legend()\n\n8    print(\"Waiting for Heart Rate data...\")\n\n    try:\n        while True:\n            # Get processed PPG data\n9            node_data = ppg.get_data()\n            heart_rate = node_data.nodes[0].heart_rate\n            timestamp = node_data.nodes[0].timestamp\n\n            # Update data\n10            x_data.append(timestamp)\n            y_data.append(heart_rate)\n\n            # Update plot\n11            line.set_xdata(x_data)\n            line.set_ydata(y_data)\n            ax.relim()\n            ax.autoscale_view()\n            plt.draw()\n            plt.pause(0.01)\n\n12    except KeyboardInterrupt:\n        print(\"Stopping real-time plotting...\")\n    finally:\n13        ppg.stop_raw_streaming()\n        plt.ioff()\n        plt.show()\n\nif __name__ == \"__main__\":\n14    main()\n\n1\n\nImport the main Teslasuit API module: Import the required Teslasuit SDK modules.\n\n2\n\nImport the PPG subsystem: Import the PPG subsystem from the SDK.\n\n3\n\nInitialize the Teslasuit API: Create an instance of the Teslasuit API.\n\n4\n\nWait for a Teslasuit device to connect: Wait for a Teslasuit device to be connected and get it.\n\n5\n\nAccess the PPG subsystem: Access the PPG subsystem from the connected device.\n\n6\n\nStart raw PPG data streaming: Start streaming raw PPG data from the suit.\n\n7\n\nInitialize the real-time plot: Set up the matplotlib plot for real-time visualization of heart rate data.\n\n8\n\nStart waiting for heart rate data: Begin the loop to process and visualize heart rate data.\n\n9\n\nRetrieve heart rate data: Get processed PPG data and extract the heart rate and timestamp.\n\n10\n\nUpdate data arrays: Append the timestamp and heart rate to the respective data arrays.\n\n11\n\nUpdate the plot: Update the plot with the new data and refresh the visualization.\n\n12\n\nHandle keyboard interrupt: Gracefully stop the program when interrupted (e.g., via Ctrl+C).\n\n13\n\nStop raw PPG data streaming: Stop the PPG data stream and close the plot.\n\n14\n\nRun the main function: Start the program using the main function.\n\n\n\n\n\n\n\n\nPotential problems and solutions\n\n\n\n\n\n\nDevice Connection Issues\n\nProblem: The Teslasuit device may not connect or be detected by the API.\n\nSolution: Ensure the device is powered on and within range. Verify that the Teslasuit drivers and SDK are correctly installed. Check for any connection errors in the logs.\n\nPPG Subsystem Not Accessible\n\nProblem: The PPG subsystem might not be available or initialized properly.\n\nSolution: Confirm that the connected Teslasuit device supports the PPG subsystem. Restart the device and reinitialize the API if necessary. Double-check that the Teslasuit version is 4.7 or higher, as earlier versions may not support the PPG functionality.\n\nSDK Initialization Issues\n\nProblem: The SDK cannot be initialized, or the library is not found.\n\nSolution: Verify that the Teslasuit SDK is installed correctly. Refer to the installation guide for instructions. Ensure the environment of the working project is properly set up. Refer to the this section for details.\n\nData Streaming Delays\n\nProblem: There may be delays in receiving HRV or heart rate data.\n\nSolution: Delays could be caused by the algorithm behind HRV calculation. Usually it requires at least 30 second of raw data to calculate HRV.",
    "crumbs": [
      "Usecases",
      "Real-time Heart rate visualiser"
    ]
  }
]